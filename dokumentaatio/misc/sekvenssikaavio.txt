Pelin aloitus:
        
        participant main
        participant scores_repository
        
        main ->* map: Map()
        main ->* clock: Clock()
        clock --> main: clock
        main->*level: Level(level_area, cell_size)
        level->*blocks: Blocks(x, y, w, h, (color)) 
        blocks-->level: background
        level->*get_shape:GetShape()
        get_shape --> level: shape, index, color
        level ->* shape_indexes: ShapeIndexes(14,7,next_piece_shape.shape)
        shape_indexes --> level: shape, rotation, indexes, objects
        level->blocks: Blocks(x, y, w, h, (color)) 
        blocks --> level: next_piece_group
        level->blocks: Blocks(x, y, w, h, (color)) 
        blocks --> level: all_current_blocks
        level --> main: level
        main ->* event: Event()
        event --> main: events
        main ->* draw_display: DrawDisplay(display, level)
        draw_display --> main: draw_display
        main ->* game_loop:GameLoop(level, draw_display, events, cell_size_clock)
        game_loop --> main:game_loop 
        main -> game_loop: start()
        
  
       
  

GameLoop-luokan aloitus ja spritejen piirto ruudulle:       
        
        game_loop -> clock: get_ticks()
        clock --> game_loop: time
        game_loop -> level: end()
        level -> scores_repository: find_all()
        scores_repository --> level:list scores
        level --> game_loop: False
        game_loop -> draw_display:render()
        draw_display --> game_loop: all_sprites.draw
        
        
Palikan liike:
        
        game_loop -> level: move_block
        game_loop  -> level: rotate_block()
        level -> shape_indexes: ShapeIndexes(x, y, current_block_shape.shaep, rotation)
        shape_indexes  --> level: shape, rotation, indexes, objects
        level->blocks: Blocks(x, y, w, h, current_block_shape.color)
        blocks --> level:new rotated piece


Rivin tyhjennys:
        
        level -> map: window_text(score)


Lopetusruutu näytölle:
          
        game_loop -> level: end()
        level -> scores_repository: find_all()
        scores_repository --> level:list scores
        level --> game_loop: True
        game_loop -> draw_display: end_screen(score, all_scores)
       
  

